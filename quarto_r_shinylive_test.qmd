---
title: R Shinylive in Quarto example
format:
  html:
    page-layout: full
    resources:
      - shinylive-sw.js
filters:
  - shinylive
embed-resources: false
---

This is a Shinylive application embedded in a Quarto doc.

This doc cannot be distributed as a standalone html file, but will work without a 'true' server if deployed on github pages or posit connect cloud. 

Credit to [TheCoatlessProfessor](https://github.com/coatless-quarto/r-shinylive-demo) and [Lextuga007](https://github.com/Lextuga007/testing-reports)

(and a bit of ChatGPT as it's been a long time since I've written a shiny app...)

```{shinylive-r}
#| standalone: true
#| viewerHeight: 800
library(shiny)
library(NHSRdatasets)
library(NHSRplotthedots)
library(dplyr)
library(DT)
library(ggplot2)

# Load dataset
df <- NHSRdatasets::ae_attendances

# Define UI
ui <- fluidPage(
  titlePanel("SPC Chart for A&E Breaches"),
  sidebarLayout(
    sidebarPanel(
      selectInput("org", "Select Org Code:", choices = unique(df$org_code)),
      selectInput("type", "Limit Breach Type:", choices = unique(df$type), multiple=TRUE)
    ),
    mainPanel(
      plotOutput("spcPlot"),
      DT::dataTableOutput("dataTable") 
    )
  )
)

# Define Server
server <- function(input, output) {
  filtered_data <- reactive({
    data <- df |> 
      filter(org_code == input$org, 
             if (is.null(input$type) || length(input$type) == 0) TRUE else type %in% input$type)
    
    # If multiple types are selected, sum breaches by period
    if (length(input$type) > 1 || length(input$type) == 0) {
      data <- data |> 
        group_by(period) |> 
        summarise(breaches = sum(breaches, na.rm = TRUE), .groups = "drop")  # Summing breaches
    }
    
    data  # Return modified dataset
  })
  

  output$spcPlot <- renderPlot({
    
    if (nrow(filtered_data()) == 0) {
    # Return an empty plot if there's no data
    spc_plot <- ggplot() + 
             theme_minimal() + 
             labs(title = "No Data Available", x = "", y = "")
  } else {
    
    spc_plot <- filtered_data() |> 
      ptd_spc(value_field = breaches, date_field = period, improvement_direction = "decrease") |>
      ptd_create_ggplot()
  }
    
    spc_plot
  })
  
  output$dataTable <- DT::renderDataTable({
    filtered_data()
  })
}


# Create Shiny app ----
shinyApp(ui = ui, server = server)
```
